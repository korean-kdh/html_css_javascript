프로그램은 현실 세계의 어떤 일을 효율적이고 효과적으로 해결하기 위해 
현실 세계를 코드화한 것입니다. 세상은 관점의 기준인 주체(subject)와 상대 또는 대상으로서 
객체(object) 그리고 주체와 객체 간의 관계(relationship)로 구성됩니다. 나아가서 주체를 
객관화하여 객체로 본다면, 우리의 세상은 객체와 객체 간의 관계로 구성됩니다. 이때 객체는 사람, 
동물, 식물 나가서는 이 세상에 존재하는 모든 사물과 논리적으로 표현될 수 있는 다양한 개념과 
상상이 포함될 수 있습니다. 이것이 객체지향 프로그램의 출발점입니다.

그러면 객체는 무엇으로 구성되어 있다고 봐야 할까요?
예를 들어 자동차를 떠올려 보면, 상태로서 차종, 탑승 인원, 색상, 제조사 등과 기능으로 출발하다, 
멈추다. 문을 열다 등으로 구성된다고 할 수 있습니다. 프로그램에서 객체는 
속성 (attribute)과 메서드(method)로 표현됩니다. 어떤 시점에서 객체의 정적인 상태값으로 
속성과 객체의 동적 기능인 메서드로 구성됩니다. 객체의 값을 가져오는 방법은 속성일 경우에 
변수의 값을 표현하는 형태와 같은 myCar['doors'] 방식의 대괄호 표기법과 속성 접근자인 점(dot) 
표기법을 사용한 myCars.color와 같은 방법을 모두 사용할 수 있습니다
메서드는 키(key)에 괄호를 붙여 myCar.start()와 같이 사용합니다. 
매개변수(전달변수)를 사용해 외부에서 필요한 값을 주입할 수도 있습니다.

배열의 값을 표현하는 대괄호 표기법으로 객체의 값을 표현하는 특징으로 인해 
연관배열(associative array)이라고 부릅니다. 문자열 인덱스(named index)를 갖는 
연관배열은 표현 방법이 배열과 같지만 객체입니다.
key-value 쌍으로 구성된 일반적인 형태로서 맵(map)이 있습니다. 키(key)가 가질 수 있는
데이터 타입에 따라 구분되는데, 배열의 키는 숫자 인덱스(numberedindex), 연관배열의 키는
문자열 인덱스(named index)를 가지며, 맵의 키는 어떤 데이터 타입도 가질 수 있습니다.

배열, 연관배열, 맵의 키가 가질 수 있는 데이터 타입
구분            키(key)가 가질 수 있는 데이터 타입
배열            숫자 인덱스(0부터 시작하는 정수, numbered idnex)
연관배열(객체)   문자열 인덱스(named idnex)
맵(map)         모든 데이터 타입